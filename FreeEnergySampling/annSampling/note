* Baisc Concepts
	Collective Variables CVs != Reaction Coordinates
	ForceOnColvars = (-dV(x)/d(CVs) + kbT*dln|J|/d(CVs)) = (d=parital diff)
	V = effective potential. For Langevin dynamics, it is defined as the summation of  Usys & Udrag & Urandom 
	Fabf = -ForceOnColvars * d(cv)/dx
	Ftot = FUsys + Fdrag + Frandom (actually drag force can be considered to be random force in sufficiently long simulation time)
	In average <Ftot> = <Fusys> = -<Fabf>
	At this moement, applying biasing forces to the system would let the system undergoes random walk --> Finstataenous + Fabf = Fdrag + Fr ---> ~= random walk
	So the simulation ends as <Ftot> = <FUsys> or the equivalent statement <Ftot + Fabf> = 0
	The final free energy profile along collective variables (CVs) is derived by -S<FUsys> d(CVs) = S<Fabf> d(CVs)

* Numerical Instability
	Numerical Instability was found in some systems, especially in fast dynamics' .
	Faster dynamics, larger error --> due to the slow convergence 
	Faster dynamics should come with bigger frictCoeff to reduce numerical error --> increase convergence efficiency
	Slower dynamics should come with slower frictCoeff to increase convergence efficiency 
	Current setup
	1D gamma = 0.05; ANN: 1-20-16-1, opt = adam, initial:lr=0.075, regul=0.00025, mid-final:lr=0.075, regul=0, epoch 2500/5000
	2D gamma = 0.001; ANN: 1(2)-30-24-2, opt = adam, initial:lr=0.031, regul=0.00020, mid-final:lr=0.031, regul=0, epoch 5000/8000
	

* Issues on rendering plots
	Rendering for 2D or higher dimensions should discard the right boundary so as to prevent boundary error

* Issues on binning the system
	linspace --> binNum + 1 so that interval= 2*half_boxboudary / binNum
	arange --> interval= 2*half_boxboudary/binNum

* Issues on chosing friction coefficient(gamma) (refer to numerical instability)
	For 1D its ok
	For 2D if gamma is too small --> large deviation occurr, especially for fast (very fast) dynamics system > m1T1 
	but it is suitable for slow dynamics system --> like m1T0.1



